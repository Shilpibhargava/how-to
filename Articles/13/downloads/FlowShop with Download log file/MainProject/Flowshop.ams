## ams_version=1.0

Model Main_Flow_Shop {
	Comment: {
		"Keywords:
		CallBackNewIncumbent, MIP model, Gantt chart, AsynchronousExecute, GMP."
	}
	Section WebUI_support {
		Set AllPublicIdentifiers {
			SubsetOf: AllIdentifiers;
			Definition: Main_Flow_Shop;
		}
		Section Gantt_Chart {
			Procedure prepInterface {
				Body: {
					pGCJobStart(j,m)  := StartTime( first(s | JobSchedule(j,s)),m);
					pGCJobDuration(j,m) := ProcesTime(j,m);
				}
			}
			StringParameter sp_RefTime {
				Definition: "2000-01-01 01:01:01";
			}
			StringParameter sp_EndTime {
				Definition: "2000-01-07 01:01:01";
			}
			Parameter pGCJobStart {
				IndexDomain: (j,m);
			}
			Parameter pGCJobDuration {
				IndexDomain: (j,m);
			}
			StringParameter JobDescription {
				IndexDomain: (j);
				Text: "Description of jobs that can be used inside the Gantt Chart";
				Definition: {
					FormatString("J%i", ord(j));
				}
			}
			StringParameter MachineDescription {
				IndexDomain: (m);
				Text: "Description of machines that can be used inside the Gantt Chart";
				Definition: {
					FormatString("M%i", ord(m));
				}
			}
			Set s_GCWidgetActionNumbers {
				SubsetOf: Integers;
				Index: i_gcwan;
				Definition: ElementRange(1,9);
			}
			StringParameter sp_GCWidgetActions {
				IndexDomain: (i_gcwan,webui::indexWidgetActionSpec);
				Definition: {
					data { 
						( 1, displaytext ) : "Optimize",  
						( 1, icon        ) : "aimms-blog2",  
						( 1, procedure   ) : "prBtnSolve",  
						( 1, state       ) : "Active" 
						}
				}
			}
		}
	}
	Parameter MaxJobs {
		Text: "Number of elements in the set Jobs";
		Range: integer;
	}
	Set Jobs {
		Text: "Set of all Jobs";
		Index: j, j2;
		Definition: {
			ElementRange(1,MaxJobs, prefix: "Job-");
		}
	}
	Set Schedules {
		Text: "Set of all schedules";
		Index: s;
		Definition: {
			ElementRange(1,MaxJobs, prefix: "Pos-");
		}
	}
	Parameter MaxMachines {
		Text: "Number of elements in the set Machines";
		Range: integer;
	}
	Set Machines {
		Text: "Set of all machines";
		Index: m;
		Definition: {
			ElementRange(1,MaxMachines, prefix: "M-");
		}
	}
	Parameter ProcesTime {
		IndexDomain: (j,m);
		Text: "Time required to process job j on machine m";
	}
	Variable JobSchedule {
		IndexDomain: (j,s);
		Text: "Determining the place of the job";
		Range: binary;
	}
	Variable StartTime {
		IndexDomain: (s,m);
		Text: "The time at which job in schedule position s commences processing on machine m";
		Range: nonnegative;
	}
	Constraint OneJobPerSchedule {
		IndexDomain: (s);
		Text: "Only one job is related to every schedule";
		Definition: sum(j, JobSchedule(j,s)) = 1;
	}
	Constraint OneSchedulePerJob {
		IndexDomain: (j);
		Text: "Only one schedule is related to every job";
		Definition: sum(s, JobSchedule(j,s)) = 1;
	}
	Constraint MachineStartTime {
		IndexDomain: (s,m) | m <> last(Machines);
		Text: "The commencement of schedule s on machine m+1 is no earlier then its finish on machine m";
		Definition: StartTime(s,m + 1) >=  StartTime(s,m) + sum(j, ProcesTime(j,m)*JobSchedule(j,s));
	}
	Constraint ScheduleStartTime {
		IndexDomain: (s,m) | s <> last(Schedules);
		Text: "The commencement of schedule s + 1 on machine m is no earlier then the finish time of job j on machine m";
		Definition: StartTime(s + 1,m) >=  StartTime(s,m) + sum(j, ProcesTime(j,m)*JobSchedule(j,s));
	}
	Variable TimeSpan {
		Text: "Total time to process all jobs on all machines";
		Definition: StartTime(Last(s),last(m)) + sum(j, ProcesTime(j,last(m))*JobSchedule(j,Last(s)));
	}
	MathematicalProgram FlowShopModel {
		Objective: TimeSpan;
		Direction: minimize;
		Constraints: AllConstraints;
		Variables: AllVariables;
	}
	Section MainModelProcedures {
		Procedure myExistsState {
			Body: {
				return 0 ;
			}
		}
		Procedure MyRestoreState;
		Procedure MySaveState;
		Procedure MainInitialization {
			Body: {
				webui::ExistsWebUIStateHook  := 'MyExistsState';
				webui::RestoreWebUIStateHook := 'MyRestoreState';
				webui::SaveWebUIStateHook    := 'MySaveState';
				
				MaxJobs 	:= 4;
				MaxMachines 	:= 8;
				
				GenerateData;
			}
		}
		Procedure MainExecution {
			Body: {
				Empty AllVariables;
				GenerateData();
				
				solve FlowShopModel  ;
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
		}
	}
	Procedure GenerateData {
		Body: {
			ProcesTime(j,m) := round(Uniform(1,20));
		}
	}
	Procedure prDoSolve {
		Body: {
			MainExecution();
			
			! Copy the solver status file from the pro temp folder to AIMMS PRO Storage.
			if pro::GetPROEndPoint() then
				sp_SolverLogFilename := formatString("%e.sta", CurrentSolver('MIP')) ;
				sp_shortSolverLogFilename := "solver.log" ;
				sp_ProTempLocation := pro::PROTempFolder + "/" + sp_SolverLogFilename ;
				sp_userLocation := "userdata/" + pro::PROEnvironment + "/" + pro::PROUserName + "/" + pro::ModelName + "/" + sp_shortSolverLogFilename ;
				pro::SaveFileToCentralStorage( sp_ProTempLocation, sp_userLocation );
			endif ;
			prepInterface;
		}
		StringParameter sp_SolverLogFilename;
		StringParameter sp_ProTempLocation;
		StringParameter sp_userLocation;
		StringParameter sp_shortSolverLogFilename;
	}
	Procedure prSolve {
		Body: {
			if pro::GetPROEndPoint() then
				if pro::DelegateToServer( waitForCompletion  :  1, 
							  completionCallback :  'pro::session::LoadResultsCallBack' ) then	
					return 1;
				endif ;
			endif ;
			
			prDoSolve();
		}
	}
	Procedure prBtnSolve {
		Body: {
			prSolve();
		}
	}
	Procedure prDownloadSolverLogFile {
		Arguments: (FileLocation,statusCode,statusDescription);
		Body: {
			sp_shortSolverLogFilename := "solver.log" ;
			FileLocation := sp_shortSolverLogFilename ;
			
			sp_FileLoc := webui::GetIOFilePath( sp_shortSolverLogFilename );
			
			sp_userLocation := "userdata/" + pro::PROEnvironment + "/" + pro::PROUserName + "/" + pro::ModelName + "/" + sp_shortSolverLogFilename;
			
			pro::RetrieveFileFromCentralStorage( sp_userLocation, sp_FileLoc );
			
			if FileExists(sp_FileLoc) then
				statusCode := webui::ReturnStatusCode('CREATED');
				statusDescription := "Nice" ;
			else
				statusCode := webui::ReturnStatusCode('ERROR');
				statusDescription := "Better luck next time" ;
			endif ;
		}
		StringParameter FileLocation {
			Property: Output;
		}
		Parameter statusCode {
			Property: Output;
		}
		StringParameter statusDescription {
			Property: Output;
		}
		StringParameter sp_SolverLogFilename;
		StringParameter sp_FileLoc;
		StringParameter sp_userLocation;
		StringParameter sp_shortSolverLogFilename;
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
