## ams_version=1.0

Model Main_genColorCSS {
	Section WebUI_support {
		Parameter p_noBars {
			InitialData: 2;
		}
		Set s_BarNumbers {
			Index: i_barNo;
			Definition: elementRange(1,p_noBars,prefix:"b-");
		}
		Parameter p_value {
			IndexDomain: i_barNo;
			Definition: 2;
			webui::AnnotationsIdentifier: sp_barAnnot;
		}
		StringParameter sp_barAnnot {
			IndexDomain: i_barNo;
			Definition: formatString("%s-%i",sp_shownPaletteName,ord(i_barNo));
		}
		StringParameter sp_shownPaletteName {
			Definition: formatString("i-want-hue-normal-%i", p_noBars);
		}
	}
	StringParameter sp_inputFolder;
	StringParameter sp_outputFolder;
	StringParameter sp_palette;
	Set s_colorNumbers {
		SubsetOf: Integers;
		Index: i_colorNo;
	}
	StringParameter sp_colorCode {
		IndexDomain: i_colorNo;
	}
	Parameter p_colorCode {
		IndexDomain: i_colorNo;
	}
	Set s_palletteNumbers {
		SubsetOf: Integers;
		Index: i_palletteNo;
	}
	StringParameter sp_jsonDataFiles {
		IndexDomain: i_palletteNo;
	}
	StringParameter sp_palletteNames {
		IndexDomain: i_palletteNo;
	}
	StringParameter sp_eggWhite {
		Definition: "#fffff4";
	}
	Procedure pr_transcribeBunchOfJSONColorFilesToCSSforAIMMS {
		Body: {
			pr_loadColorMaps(); ! read mapping file.
			
			! The input folder contains small json files with hex codes.
			! The output folder contains CCS generated files to be used in an AIMMS app.
			!sp_inputFolder  :=  "input-fib-i-want-hue-normal-data";
			!sp_outputFolder := "output-fib-i-want-hue-normal-data";
			sp_inputFolder  :=  "json-inputs";
			sp_outputFolder :=  "MainProject/WebUI/resources/css/i-want-hue";
			
			! Get names of input files
			DirectoryGetFiles( 
				directory       :  sp_inputFolder, 
				filter          :  "*.json", 
				filenames       :  sp_jsonDataFiles(i_palletteNo), 
				recursive       :  0, 
				attributeFilter :  {});
			
			! The palette name is the name of the input file minus the extension ".json"
			p_fnLen(i_palletteNo) := StringLength( sp_jsonDataFiles(i_palletteNo) );
			sp_palletteNames(i_palletteNo) := substring( sp_jsonDataFiles(i_palletteNo), 1, p_fnLen(i_palletteNo)-5 );
			
			! For each palette: read the data, write the corresponding .css file.
			for i_palletteNo do
				pr_loadColorsString(sp_inputFolder,
					sp_jsonDataFiles(i_palletteNo));
				pr_writeCSSFile(sp_palletteNames(i_palletteNo),
					sp_palletteNames(i_palletteNo)+".css",
					sp_outputFolder);
			endfor ;
		}
		Parameter p_fnLen {
			IndexDomain: i_palletteNo;
		}
	}
	Procedure pr_loadColorMaps {
		Body: {
			! Read the mapping file for this app.
			dex::AddMapping(
				mappingName :  "colorMapString", 
				mappingFile :  "mappings/colorJsonMapString.xml");
		}
	}
	Procedure pr_loadColorsString {
		Arguments: (sp_folder,sp_file);
		Body: {
			! The sp_file is a JSON file, so use dex to read the data.
			empty s_colorNumbers ;
			dex::ReadFromFile(
				dataFile         :  sp_folder + "/" + sp_file,  
				mappingName      :  "colorMapString", 
				emptyIdentifiers :  0, 
				emptySets        :  0, 
				resetCounters    :  1);
		}
		StringParameter sp_folder {
			Property: Input;
		}
		StringParameter sp_file {
			Property: Input;
		}
	}
	Procedure pr_writeCSSFile {
		Arguments: (sp_paletteName,sp_filename,sp_folderName);
		Body: {
			sp_fullFilename := sp_folderName + "/" + sp_filename ;
			
			put f_cssFile ;
			
			block ! Document purpose of the .css file.
				put "/*", / ;
				put "    CSS file generated by genColorCSS.aimms", / ;
				put "    Purpose: add a color palette for data coloring", /, / ;
				put "    Section 1, giving the colors in the color palette a (numbered) name", / ;
				put "    Note: this kind of .CSS file is not supported by IE11", / ;
				put "*/", / ;
			endblock ;
			
			block ! put out the root section with the actual names.
				put /, ":root {", / ;
				put formatString("    --%s-color-0: %s ;", 
					sp_paletteName, sp_eggWhite ), /;
				for i_colorNo do
					put formatString("    --%s-color-%e: %s ;", 
						sp_paletteName, i_colorNo, sp_colorCode(i_colorNo) ), /;
				endfor ;
				put "}", / ;
			endblock ;
			
			block ! Here comes section 2
				put /, "/*", / ;
				put "    Section 2: Associating the annotations with color names for bar, bubble, and Gantt Charts.", / ;
				put "*/", / ;
			endblock ;
			
			block ! Section 2: CSS rules to fill areas in the bar, bubble, and Gantt Charts.
				put ".annotation-"+sp_paletteName+"-0{", / ;
				put "    fill: var(--"+sp_paletteName+"-color-0);", / ;
				put "}", / ;
				for i_colorNo do
					put formatString(".annotation-%s-%e{",sp_paletteName,val(i_colorNo)), / ;
					put formatString("    fill: var(--%s-color-%e);",sp_paletteName,val(i_colorNo)), / ;
					put "}", / ;
				endfor ;
			endblock ;
			
			block ! Here comes section 3
				put /, "/*", / ;
				put "    Section 3: Associating the annotations with colors for legend widget.", / ;
				put "*/", / ;
			endblock ;
			
			block ! Section 3: CSS rules to fill areas in the legend widget
				put ".aimms-widget.tag-legend-widget .annotation-"+sp_paletteName+"-0{", / ;
				put "    background: var(--"+sp_paletteName+"-color-0);", / ;
				put "}", / ;
				for i_colorNo do
					put formatString(".aimms-widget.tag-legend-widget .annotation-%s-%e{",sp_paletteName,i_colorNo), / ;
					put formatString("    background: var(--%s-color-%e);",sp_paletteName,i_colorNo), / ;
					put "}", / ;
				endfor ;
			endblock ;
			
			block ! Here comes section 4
				put /, "/*", / ;
				put "    Section 4: Associating the annotations with colors for table widget.", / ;
				put "*/", / ;
			endblock ;
			
			block ! Section 4: CSS rules to fill areas in the table widget
				put ".aimms-widget.tag-table-widget .annotation-"+sp_paletteName+"-0{", / ;
				put "    background: var(--"+sp_paletteName+"-color-0);", / ;
				put "}", / ;
				for i_colorNo do
					put formatString(".aimms-widget.tag-table-widget .annotation-%s-%e{",sp_paletteName,i_colorNo), / ;
					put formatString("    background: var(--%s-color-%e);",sp_paletteName,i_colorNo), / ;
					put "}", / ;
				endfor ;
			endblock ;
			
			block ! Here comes section 5
				put /, "/*", / ;
				put "    Section 5: Associating the annotations with colors for line chart.", / ;
				put "*/", / ;
			endblock ;
			
			block ! Section 5: CSS rules to fill lines and circles in the linechart widget
				put ".aimms-widget.tag-linechart   path.annotation-"+sp_paletteName+"-0{", / ;
				put "    stroke: var(--"+sp_paletteName+"-color-0);", / ;
				put "}", / ;
				put ".aimms-widget.tag-linechart circle.annotation-"+sp_paletteName+"-0{", / ;
				put "    stroke: var(--"+sp_paletteName+"-color-0);", / ;
				put "    fill:   var(--"+sp_paletteName+"-color-0);", / ;
				put "}", / ;
				for i_colorNo do
					put formatString(".aimms-widget.tag-linechart   path.annotation-%s-%e{",sp_paletteName,i_colorNo), / ;
					put formatString("    stroke: var(--%s-color-%e);",sp_paletteName,i_colorNo), / ;
					put "}", / ;
					put formatString(".aimms-widget.tag-linechart circle.annotation-%s-%e{",sp_paletteName,i_colorNo), / ;
					put formatString("    stroke: var(--%s-color-%e);",sp_paletteName,i_colorNo), / ;
					put formatString("    fill:   var(--%s-color-%e);",sp_paletteName,i_colorNo), / ;
					put "}", / ;
				endfor ;
			endblock ;
			
			
			
			putclose ;
		}
		StringParameter sp_filename {
			Property: Input;
		}
		StringParameter sp_folderName {
			Property: Input;
		}
		StringParameter sp_fullFilename;
		File f_cssFile {
			Name: sp_fullFilename;
			Device: Disk;
			Mode: replace;
		}
		StringParameter sp_paletteName {
			Property: Input;
		}
	}
	Section Application_initialization_execution_and_termination {
		Procedure MainInitialization {
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				pr_loadColorMaps();
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
