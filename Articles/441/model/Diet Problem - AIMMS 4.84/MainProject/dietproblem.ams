## ams_version=1.0

Model Main_DietProblem {
	Comment: {
		"Keywords:
		Diet problem, Blending problem, Unit-valued Parameter, Unit Parameter, Quantity, Unit conversion."
	}
	Section Model_Section {
		Set s_foodTypes {
			Index: i_f;
			Definition: {
				data 
				    { 'Big Mac'             , 'Quarter Pounder'     , 'French Fries'        , Salad                 , 'Lowfat Milk'         ,
				      'Coca Cola'           , 'Big Mac Menu'        , 'Quarter Pounder Menu', 'Vegetable Burger'    }
			}
		}
		Set s_nutrients {
			Index: i_n;
		}
		Parameter p_nutrientValuePerUnit {
			IndexDomain: (i_f,i_n);
			Unit: up_unitNutrients(i_n);
		}
		Parameter p_maximumNumberOfServings {
			IndexDomain: (i_f);
		}
		Parameter p_maximumAllowanceOfNutrient {
			IndexDomain: (i_n);
			Text: "Maximum Allowed";
			Unit: up_unitNutrients(i_n);
		}
		Parameter p_minimumRequirementOfNutrient {
			IndexDomain: (i_n);
			Text: "Minimum Requirement";
			Unit: up_unitNutrients(i_n);
		}
		Parameter p_pricePerUnit {
			IndexDomain: (i_f);
			Unit: Hfl;
		}
		Parameter p_weightOfFoodType {
			IndexDomain: (i_f);
			Unit: g;
		}
		Variable v_totalWeightOptimalDiet {
			Unit: g;
			Definition: Sum[ i_f, p_weightOfFoodType(i_f) * v_numberOfUnitsInMenu(i_f)];
		}
		Variable v_totalValueOfNutrientsInOptimalDiet {
			IndexDomain: (i_n);
			Unit: up_unitNutrients(i_n);
			Definition: Sum[ i_f, p_nutrientValuePerUnit(i_f,i_n) * v_numberOfUnitsInMenu(i_f)];
		}
		Variable v_numberOfUnitsInMenu {
			IndexDomain: (i_f);
			Range: {
				{0..p_maximumNumberOfServings(i_f)}
			}
		}
		Variable v_totalCost {
			Unit: Hfl;
			Definition: {
				Sum[ i_f, p_pricePerUnit(i_f) * v_numberOfUnitsInMenu(i_f)];
			}
		}
		Constraint c_allowanceConstraint {
			IndexDomain: i_n | p_maximumAllowanceOfNutrient(i_n);
			Unit: up_unitNutrients(i_n);
			Definition: {
				Sum[ i_f, p_nutrientValuePerUnit(i_f,i_n) * v_numberOfUnitsInMenu(i_f)] <= p_maximumAllowanceOfNutrient(i_n);
			}
		}
		Constraint c_requirementConstraint {
			IndexDomain: i_n | p_minimumRequirementOfNutrient(i_n);
			Unit: up_unitNutrients(i_n);
			Definition: {
				Sum[ i_f, p_nutrientValuePerUnit(i_f,i_n) * v_numberOfUnitsInMenu(i_f)] >= p_minimumRequirementOfNutrient(i_n);
			}
		}
		MathematicalProgram mp_dietProblem {
			Objective: v_totalCost;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: MIP;
		}
	}
	Section Quantities_and_Units_Section {
		DeclarationSection Quantities_and_Units {
			Quantity SI_Mass {
				BaseUnit: g;
				Conversions: {
					kg -> g : # -> # * 1000,
					oz -> g : # -> # * 283.4952
				}
				Comment: "Expresses the value for the amount of matter.";
			}
			Quantity SI_Energy {
				BaseUnit: kcal;
				Conversions: {
					J  -> kcal : # -> # * 0.0002388458966,
					kJ -> kcal : # -> # * 0.2388458966
				}
				Comment: "Expresses the value for the capacity to do work.";
			}
			Quantity Currency {
				BaseUnit: Euro;
				Conversions: {
					US$ -> Euro : # -> # * 0.9708737863,
					Hfl -> Euro : # -> # * 0.4368932039
				}
			}
			UnitParameter up_unitNutrients {
				IndexDomain: (i_n);
			}
			StringParameter DefaultUnits {
				IndexDomain: i_n;
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: minute->s : #-># * 60;
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI."
				}
			}
		}
	}
	Section GUI_Section {
		Set s_possibleUnits {
			Definition: data { g, kg, oz, j, kj, kcal };
		}
		Set s_possibleUnitsByNutrients {
			IndexDomain: (i_n);
			SubsetOf: s_possibleUnits;
			Definition: {
				data
				    { Calories      : { j   , kj  , kcal } ,
				      Protein       : { g   , kg  , oz   } ,
				      Fat           : { g   , kg  , oz   } ,
				      Carbohydrates : { g   , kg  , oz   } } ;
			}
		}
		Assertion CheckUnit {
			IndexDomain: i_n;
			Definition: StringToElement(s_possibleUnits,up_unitNutrients(i_n),0) in s_possibleUnitsByNutrients(i_n) OR not up_unitNutrients(i_n);
			Action: {
				DialogMessage(FormatString("This unit is not allowed for this value (%e)", i_n),"Warning");
				empty up_unitNutrients(i_n)
			}
		}
	}
	Section Leveraging_the_WebUI {
		StringParameter sp_workflow {
			IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			Definition: {
				{
					( '1', 'title' ) : "demo" , ! (Optional) The title for the Workflow to be displayed on top of the Workflow Panel.
					( '1', 'style' ) : ""       ! (CURRENTLY NOT IN USE) When styles or themes are introduced for the Workflow Panel, this attribute will hold that value.
				}
			}
		}
		StringParameter sp_workflowSteps {
			IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
			Definition: {
				{
					( '1', '1', 'displayText'       ) : "Welcome", 
					( '1', '1', 'icon'              ) : "aimms-happy", 
					( '1', '1', 'pageId'            ) : "home_1", 
					( '1', '1', 'tooltip'           ) : "Home page", 
					( '1', '1', 'workflowPageState' ) : "Active", 
					( '1', '1', 'pageDataState'     ) : "", 
					( '1', '1', 'redirectPageId'    ) : "home_1", 
				
					( '1', '2', 'displayText'       ) : "Input", 
					( '1', '2', 'icon'              ) : "aimms-pencil6", 
					( '1', '2', 'pageId'            ) : "input_data", 
					( '1', '2', 'tooltip'           ) : "input data", 
					( '1', '2', 'workflowPageState' ) : "Active", 
					( '1', '2', 'pageDataState'     ) : "", 
					( '1', '2', 'redirectPageId'    ) : "home_1", 
				
					( '1', '3', 'displayText'       ) : "Solve",
					( '1', '3', 'icon'              ) : "aimms-cog3", 
					( '1', '3', 'pageId'            ) : "solve_1",
					( '1', '3', 'tooltip'           ) : "Solve and results", 
					( '1', '3', 'workflowPageState' ) : "Active", 
					( '1', '3', 'pageDataState'     ) : "", 
					( '1', '3', 'redirectPageId'    ) : "home_1" 
				}
			}
		}
		StringParameter sp_secundaryActions {
			IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
			Definition: {
				{
					('1', 'displaytext' ) : "Solve",          ! (Optional) The text/label you would like to give the action.
					('1', 'icon'        ) : "aimms-cog",      ! (Optional) The icon you want to display for the respective action.
					('1', 'procedure'   ) : "MainExecution",  ! (Optional) The procedure you want to call when the respective action is clicked.
					('1', 'state'       ) : "Active"          ! (Optional) Active (displayed and clickable), Inactive (displayed and not clickable) and Hidden (not displayed). By default, the state is Hidden.
				}
			}
		}
	}
	Procedure MainExecution {
		Body: {
			if pro::GetPROEndPoint() then
				if pro::DelegateToServer(
					waitForCompletion:1,
			                completionCallback: 'pro::session::LoadResultsCallback' ) then
					return 1 ;
				endif ;
			endif ;
			
			Solve mp_dietProblem;
		}
	}
	Section Application_initialization_and_termination {
		Procedure MainInitialization {
			Body: {
				Empty v_numberOfUnitsInMenu, v_totalCost, v_totalValueOfNutrientsInOptimalDiet, v_totalWeightOptimalDiet;
			}
		}
		Procedure PostMainInitialization;
		Procedure PreMainTermination {
			Body: {
				return 1 ;
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
		}
	}
}
