## ams_version=1.0

Model Main_ReadRelationIndexedSet {
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
	StringParameter sp_datasource;
	Set s_a {
		Index: i_a;
	}
	Set s_b {
		Index: i_b;
	}
	Set rel_ab {
		SubsetOf: (s_a,s_b);
	}
	Set s_indexedA {
		IndexDomain: i_a;
		SubsetOf: s_b;
	}
	Parameter bp_indicatorAB {
		IndexDomain: (i_a,i_b);
		Range: binary;
	}
	StringParameter sp_primaryAction {
		IndexDomain: webui::indexPageActionSpec;
		Definition: {
			{
				'displaytext' : "Read from database",  
				'icon'        : "aimms-database3",  
				'procedure'   : "pr_readRelationIndexedSet",  
				'state'       : "Active"
			}
		}
	}
	DatabaseProcedure dbpr_addColumnOne {
		DataSource: sp_datasource;
		SqlQuery: {
			"select A, B, 1 as one from AB ;"
		}
		Property: UseResultSet;
		Mapping: {
			"A"   --> i_a,
			"B"   --> i_b,
			"one" --> bp_indicatorAB(i_a,i_b)
		}
	}
	Procedure pr_readRelationIndexedSet {
		Body: {
			read from table dbpr_addColumnOne ;
			rel_ab := { (i_a, i_b) | bp_indicatorAB(i_a, i_b) };
			s_indexedA(i_a) := { i_b | bp_indicatorAB(i_a, i_b) };
		}
	}
	Section Application_initialization_execution_and_termination {
		Procedure MainInitialization {
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				sp_datasource := "data\\one.dsn" ;
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
