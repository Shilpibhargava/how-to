## ams_version=1.0

Model Main_InventoryManagement {
	DeclarationSection Units_of_Measurement {
		Quantity SI_Volume {
			BaseUnit: m3;
			Comment: "Expresses the value of solid content.";
		}
		Set AllUsableColors {
			SubsetOf: AllColors;
			Definition: AllColors;
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
	DeclarationSection Stock_Keeping_Units {
		Set s_stockKeepingUnit {
			Index: i_sku;
		}
		StringParameter sp_manufacturer {
			IndexDomain: i_sku;
		}
		Parameter p_volume {
			IndexDomain: i_sku;
			Unit: m3;
		}
		ElementParameter ep_color {
			IndexDomain: i_sku;
			Range: AllUsableColors;
		}
		Parameter p_stock {
			IndexDomain: i_sku;
			Range: {
				{0..inf}
			}
		}
	}
	Section SKUForms {
		Parameter bp_SKUFORM_Selection {
			IndexDomain: i_sku;
			Range: binary;
		}
		StringParameter sp_SKUFORM_InternalName {
			IndexDomain: i_sku;
		}
		Procedure pr_SKUFORM_Create {
			Arguments: (formdata,sp_newSKUName);
			Body: {
				SetElementAdd(s_stockKeepingUnit,ep_anSKU,formData('sp_SKUFORM_InternalName'));
				sp_newSKUName := formData('sp_SKUFORM_InternalName');
			}
			Comment: "This procedure creates a new element in the set s_stockKeepingUnit";
			DeclarationSection Argument_declarations {
				StringParameter formData {
					IndexDomain: webui::ffn;
					Property: Input;
				}
				StringParameter sp_newSKUName {
					Property: Output;
				}
			}
			DeclarationSection local_declarations {
				ElementParameter ep_anSKU {
					Range: s_stockKeepingUnit;
				}
			}
		}
		Procedure pr_SKUFORM_Check {
			Arguments: (formData,validationErrors);
			Body: {
				! Verify that a new name (bp_SKUFORM_Selection is empty) is indeed unique (not yet present in the set).
				if ( not exists[ i_sku | bp_SKUFORM_Selection(i_sku) ] ) then
					if ( StringToElement(s_stockKeepingUnit, formData('sp_SKUFORM_InternalName')) ) then
						validationErrors('sp_SKUFORM_InternalName') := webui::CreateValidationError("validation-error-name-already-exists");
					endif;
				endif;
				
				if (StringLength(formData('sp_SKUFORM_InternalName')) < 2) then
					validationErrors('sp_SKUFORM_InternalName') := webui::CreateValidationError("validation-error-min-length");
				endif;
				
				if (formData('sp_SKUFORM_InternalName') = "form-enter-InternalName" ) then
					validationErrors('sp_SKUFORM_InternalName') := webui::CreateValidationError("validation-error-required-field");
				endif;
				
				if (StringLength(formData('sp_manufacturer')) < 3) then
					validationErrors('sp_manufacturer') := webui::CreateValidationError("validation-error-not-a-valid-manufacturer-name");
				endif;
				
				block
					p_loc_Stock := Val(formData('p_stock'));
					if ( ( p_loc_Stock < 0 ) or ( mod(p_loc_Stock,1) <> 0 ) ) then
						validationErrors('p_stock') := webui::CreateValidationError("validation-error-not-a-valid-availability");
					endif;
				onerror ep_err do
					validationErrors('p_stock') := webui::CreateValidationError("validation-error-not-a-valid-availability");
					errh::MarkAsHandled(ep_err);
				endblock;
			}
			Comment: {
				"webui_runtime::SKUForm_p_dtock
				webui_runtime::SKUForm_ep_color
				webui_runtime::SKUForm_p_volume
				webui_runtime::SKUForm_sp_manufacturer
				webui_runtime::SKUForm_sp_SKUFORM_InternalName
				
				
				webui_runtime::SKUForm_SaveForm
				webui_runtime::SKUForm_NewEntry
				webui_runtime::SKUForm_DeleteEntry"
			}
			DeclarationSection Argument_declarations {
				StringParameter formData {
					IndexDomain: webui::ffn;
					Property: Input;
				}
				StringParameter validationErrors {
					IndexDomain: webui::ffn;
					Property: Output;
				}
			}
			DeclarationSection Local_declarations {
				Parameter p_loc_Stock;
				ElementParameter ep_err {
					Range: errh::PendingErrors;
				}
			}
		}
		Procedure pr_SKUFORM_DataInit {
			Body: {
				bp_SKUFORM_Selection(i_sku) := 0;
			}
		}
		Procedure pr_SKUFORM_Setup {
			Body: {
				FormFields := data {
					'sp_SKUFORM_InternalName',
					'sp_manufacturer',
					'p_volume',
					'ep_color',
					'P_stock'};
				
				webui::SetupForm(
					formId              :  "SKUForm",
					selInMaster         :  'bp_SKUFORM_Selection',
					detailsIdentifiers  :  FormFields,
					validationHandler   :  'pr_SKUFORM_Check',
					updateEntryCallback :  'pr_SKUFORM_Create');
			}
			DeclarationSection Local_Declarations {
				Set Formfields {
					SubsetOf: AllIdentifiers;
					Index: ff;
				}
			}
		}
		Section Interacting_with_forms {
			StringParameter sp_SKUFORM_SecondaryPageActions {
				IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
				Definition: {
					{ 
						( '1', 'displaytext' ) : "Save"                              ,  
						( '1', 'icon'        ) : "aimms-floppy-disk"                 ,
						( '1', 'procedure'   ) : "webui_runtime::SKUForm_SaveForm"   ,  
						( '1', 'state'       ) : "Active"                            ,
					
						( '2', 'displaytext' ) : "Create"                            ,
						( '2', 'icon'        ) : "aimms-file-plus"                   ,
						( '2', 'procedure'   ) : "webui_runtime::SKUForm_NewEntry"   ,  
						( '2', 'state'       ) : "Active"                            ,
					
						( '3', 'displaytext' ) : "Delete"                            ,  
						( '3', 'icon'        ) : "aimms-bin"                         ,
						( '3', 'procedure'   ) : "webui_runtime::SKUForm_DeleteEntry",  
						( '3', 'state'       ) : "Active"                             
					}
				}
			}
		}
	}
	Section Application_initialization_execution_and_termination {
		Procedure MainInitialization {
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				pr_SKUFORM_DataInit();
				pr_SKUFORM_Setup();
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1 ;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
